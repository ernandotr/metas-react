{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\Node_react\\\\site\\\\pages\\\\cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n\nfunction Cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  });\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch('http://localhost/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        });\n      }\n    } catch (err) {\n      setResponse({\n        formSave: false,\n        type: 'success',\n        message: \"Erro meta n√£o cadastrada com sucessoS\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: `.form{\n                    background-color: #171941;\n                    color: #bf38ac;\n                    padding-top: 30px;\n                    padding-bottom: 150px;\n                    margin-bottom: 0rem !important;\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"display-4 text-center\",\n          children: \"Cadastrar Minha Meta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 46\n        }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 48\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMeta,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            id: \"name\",\n            placeholder: \"Nome da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 115\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 120\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Descri\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            id: \"description\",\n            placeholder: \"Descri\\xE7\\xE3o da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 134\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 139\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"status\",\n            id: \"status\",\n            placeholder: \"Status da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 121\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 126\n          }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: true,\n            children: \"Enviando...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 42\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 96\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\nexport default Cadastrar;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/Node_react/site/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Container","Cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { Jumbotron, Container } from 'reactstrap';\r\n\r\n\r\nfunction Cadastrar(){\r\n    const [meta, setMeta] = useState({\r\n        name: '',\r\n        description: '',\r\n        status: ''\r\n    });\r\n\r\n    const [response, setResponse ] = useState({\r\n        formSave: false,\r\n        type: '',\r\n        message: ''\r\n    })\r\n\r\n    const onChangeInput = e => setMeta({...meta, [e.target.name]: e.target.value});\r\n\r\n    const sendMeta = async e => {\r\n        e.preventDefault();\r\n        \r\n        setResponse({formSave: true})\r\n        try{\r\n            const res = await fetch('http://localhost/metas', {\r\n                method: 'POST',\r\n                body: JSON.stringify(meta),\r\n                headers: {'Content-Type': 'application/json'}\r\n            });\r\n            const responseEnv = await res.json();\r\n            if(responseEnv.error){\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'error',\r\n                    message: responseEnv.message\r\n                });\r\n            } else{\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'success',\r\n                    message: responseEnv.message\r\n                });\r\n            }\r\n        } catch (err){\r\n            setResponse({\r\n                formSave: false,\r\n                type: 'success',\r\n                message: \"Erro meta n√£o cadastrada com sucessoS\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Jumbotron fluid className=\"form\">\r\n            <style>\r\n                {`.form{\r\n                    background-color: #171941;\r\n                    color: #bf38ac;\r\n                    padding-top: 30px;\r\n                    padding-bottom: 150px;\r\n                    margin-bottom: 0rem !important;\r\n                }`}\r\n            </style>\r\n            <Container>\r\n                <h1 className=\"display-4 text-center\">Cadastrar Minha Meta</h1>\r\n                <hr/>\r\n\r\n                {response.type === 'error' ? <p>{response.message}</p> : \"\"}\r\n                {response.type === 'success' ? <p>{response.message}</p> : \"\"}\r\n                <form onSubmit={sendMeta}>\r\n                    <label>Nome</label>\r\n                    <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome da meta\" onChange={onChangeInput}/><br/>< br/>\r\n                    <label>Descri√ß√£o</label>\r\n                    <input type=\"text\" name=\"description\" id=\"description\" placeholder=\"Descri√ß√£o da meta\" onChange={onChangeInput}/><br/>< br/>\r\n                    <label>Status</label>\r\n                    <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status da meta\" onChange={onChangeInput}/><br/>< br/>\r\n\r\n                    {response.formSave ? <button type=\"submit\" disabled>Enviando...</button> : <button type=\"submit\" >Cadastrar</button> }\r\n                </form>\r\n            </Container>\r\n        </Jumbotron>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cadastrar;"]},"metadata":{},"sourceType":"module"}